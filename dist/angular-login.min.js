/**
 * angular-login
 * @version v0.0.0 - 2014-06-02
 * @link https://github.com/aronvaughan/angular-login
 * @author  <>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
"use strict";var AVaughanLoginConfig={restCallsWillContain:"api",loginUrlForRemote:"/api/login",loginUserLabel:"username",loginPassLabel:"password",logoutUrlForRemote:"/api/logout",redirectIfTokenNotFound:!1,redirectIfTokenNotFoundUrl:"/login",authManager:_.extend(AVaughanLoginAuthManager,{})},AVaughanLogin=AVaughanLogin||{loginConfig:_.extend(AVaughanLoginConfig,{}),getAuthManager:function(){return this.loginConfig.authManager},authService:void 0,logger:void 0,construct:function(a){a&&(this.loginConfig=a)},initialize:function(a,b){this.logger=b.getLogger("AVaughanLogin"),this.logger.debug("avaughan.login get called",a),this.setAuthService(a),this.getAuthManager().setLog(b)},interceptHttpRequests:function(a){a.interceptors.push(this.getRequestInterceptor())},setAuthService:function(a){a&&(this.logger.debug("setting authService ",a),this.authService=a)},login:function(a,b,c,d,e){var f={};f[this.loginConfig.loginUserLabel]=a,f[this.loginConfig.loginPassLabel]=b;var g=this;c.post(this.loginConfig.loginUrlForRemote,f,this.getAuthenticateHttpConfig).success(function(b){g.logger.info("Login successful for user: ",[a,b]),g.getAuthManager().save(b,d,e),g.authService.loginConfirmed(b,g.configUpdateFunction)}).error(function(a){g.logger.error("login error: "+a),d.$broadcast("event:auth-loginFailed",a)})},logout:function(a,b,c){this.logger.debug("logout called");var d=this;a.post(this.loginConfig.logoutUrlForRemote,{},this.getHttpConfig()).success(function(){d.logger.info("Logout successful"),d.getAuthManager().clear(b,c),c.$broadcast("event:auth-logoutConfirmed","")}).error(function(a){d.logger.error("logout error: "+a)})},getRequestInterceptor:function(a){this.logger?this.logger.debug("get request interceptor called"):console.log("get request interceptor called");var b=this;return function(c,d){return{request:function(e){b.logger.debug("avaughan.login request interceptor!!!!",[b.getAuthManager().getTokenValues(d),e]);var f=e.url.indexOf(b.loginConfig.restCallsWillContain)>=0;return b.logger.debug("avaughan.login request is rest call?",[f,e.url]),f&&b.getAuthManager().isTokenAvailable(d,a)?b.getAuthManager().setAuthOnRequest(d,e):b.logger.debug("avaughan.login token is not available, or not rest call"),e||c.when(e)}}}},isTokenAvailable:function(a,b){return this.getAuthManager().isTokenAvailable(a,b)},checkRequest:function(a,b,c){var d=a.path();this.getAuthManager().load(b,c),this.getAuthManager().isTokenAvailable(c,b)?(this.logger?this.logger.debug("app.js routing to path",d):console.log("app.js routing to path",d),a.path(d)):this.loginConfig.redirectIfTokenNotFound&&(this.logger?this.logger.debug("not authorized, routing",this.loginConfig.redirectIfTokenNotFoundUrl):console.log("not authorized, routing",this.loginConfig.redirectIfTokenNotFoundUrl),a.path(this.loginConfig.redirectIfTokenNotFoundUrl))},getLocalToken:function(){var a=localStorage.authToken;return this.logger.debug("AUTH TOKEN:"+a),a},getHttpConfig:function(){return{headers:{"X-Auth-Token":this.getLocalToken()}}},getAuthenticateHttpConfig:function(){return{ignoreAuthModule:!0}},configUpdateFunction:function(a){return a.headers["X-Auth-Token"]||(console.log("X-Auth-Token not on original request; adding it"),a.headers["X-Auth-Token"]=this.getLocalToken()),a}};angular.module("avaughan.login",["avaughan.logging"]),angular.module("avaughan.login").provider("avLogin",["$httpProvider",function(a){var b=_.extend(AVaughanLogin,{});b.interceptHttpRequests(a),this.initialize=function(a){console.log("avaughan.login initialize called",a),b.construct(a)},this.$get=["authService","avLog",function(a,c){return console.log("avaughan.login get called",a),b.initialize(a,c),b}]}]);