/**
 * angular-login
 * @version v0.0.6 - 2014-09-02
 * @link https://github.com/aronvaughan/angular-login
 * @author  <>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
"use strict";var GrailsSpringSecurityRestAuthManager={name:"GrailsSpringSecurityRestAuthManager",useAuthTokenHeader:!0,logger:void 0,getName:function(){return this.name},setLog:function(a){this.logger=a.getLogger("AuthManager")},setAuthOnRequest:function(a,b){var c=a.authToken;this.useAuthTokenHeader?(this.logger.debug("TOKEN_MANAGER, setting X-Auth-Token header",c),b.headers["X-Auth-Token"]=c):(this.logger.debug("use url token"),b.url=b.url+"?token="+c)},isTokenAvailable:function(a,b){return this.load(b,a),angular.isDefined(a.authToken)},getTokenValues:function(a){return[a.authToken]},load:function(a,b){var c;a?c=a.get("authToken"):console.log("TOKEN_MANAGER: WARN $cookieStore is undefined"),void 0!==c&&(console.log("TOKEN_MANAGER, load, got valid value from cookie",c),b.authToken=c)},save:function(a,b,c){this.logger.debug("save, authentication token: "+a.token,a),localStorage.authToken=a.token,b.authToken=a.token,c.put("authToken",a.token)},clear:function(a,b){this.logger.debug("logout success, clearing tokens"),localStorage.clear(),a.remove("authToken"),b.authToken=void 0},getLocalToken:function(){var a=localStorage.authToken;return this.logger.debug("AUTH TOKEN:"+a),a},getHttpConfig:function(){return{headers:{"X-Auth-Token":this.getLocalToken()}}},getAuthenticateHttpConfig:function(){return{ignoreAuthModule:!0}},configUpdateFunction:function(a){return a.headers["X-Auth-Token"]||(this.logger.debug("X-Auth-Token not on original request; adding it"),a.headers["X-Auth-Token"]=this.getLocalToken()),a}},SpringSecurityAuthManager={name:"SpringSecurityAuthManager",useAuthTokenHeader:!1,userUrlHeader:!1,logger:void 0,getName:function(){return this.name},setLog:function(a){this.logger=a.getLogger("AuthManager")},setAuthOnRequest:function(a,b){var c=a.JSESSIONID;this.useAuthTokenHeader?(this.logger.debug("TOKEN_MANAGER, setting JSESSIONID header",c),b.headers.JSESSIONID=c):this.useUrlHeader&&(this.logger.debug("use url token"),b.url=b.url+"?jsessionid="+c)},isTokenAvailable:function(a,b){return this.load(b,a),angular.isDefined(a.JSESSIONID)},getTokenValues:function(a){return[a.JSESSIONID]},load:function(a,b){var c;a?c=a.get("JSESSIONID"):console.log("TOKEN_MANAGER: WARN $cookieStore is undefined"),void 0!==c&&(console.log("TOKEN_MANAGER, load, got valid value from cookie",c),b.JSESSIONID=c)},save:function(a,b,c){this.logger.debug("save, authentication token: "+a.token,a),localStorage.JSESSIONID=a.token,b.JSESSIONID=a.token,c.put("JSESSIONID",a.token)},clear:function(a,b){this.logger.debug("logout success, clearing tokens"),localStorage.clear(),a.remove("JSESSIONID"),b.JSESSIONID=void 0},getLocalToken:function(){var a=localStorage.JSESSIONID;return this.logger.debug("AUTH TOKEN:"+a),a},getHttpConfig:function(){return{headers:{JSESSIONID:this.getLocalToken()}}},getAuthenticateHttpConfig:function(){return{ignoreAuthModule:!0}},configUpdateFunction:function(a){return a.headers.JSESSIONID||(this.logger.debug("JSESSIONID not on original request; adding it"),a.headers.JSESSIONID=this.getLocalToken()),a}},AVaughanLoginConfig={restCallsWillContain:"api",loginUrlForRemote:"/api/login",loginUserLabel:"username",loginPassLabel:"password",logoutUrlForRemote:"/api/logout",redirectIfTokenNotFound:!1,redirectIfTokenNotFoundUrl:"/login",redirectAfterLogin:!1,defaultUrlAfterLogin:"/",postType:"JSON",authManager:void 0,setAuthManager:function(a){this.authManager=_.extend(a,{})}},AVaughanLoginConfigFactory={create:function(a,b){var c=_.extend(AVaughanLoginConfig,a);c.setAuthManager(b)}},AVaughanLogin=AVaughanLogin||{loginConfig:_.extend(AVaughanLoginConfig,{}),getAuthManager:function(){return this.loginConfig.authManager},authService:void 0,logger:void 0,$rootScope:void 0,construct:function(a){a&&(this.loginConfig=a)},initialize:function(a,b,c){this.logger=b.getLogger("AVaughanLogin"),this.logger.debug("avaughan.login get called",a),this.setAuthService(a),this.getAuthManager().setLog(b),this.$rootScope=c},interceptHttpRequests:function(a){a.interceptors.push(this.getRequestInterceptor())},setAuthService:function(a){a&&(this.logger.debug("setting authService ",a),this.authService=a)},login:function(a,b,c,d,e,f){this.logger.debug("service login called ",["location",f,"http",c,"$rootScope",d,"$cookieStore",e]);var g=this,h="application/json",i={};i[this.loginConfig.loginUserLabel]=a,i[this.loginConfig.loginPassLabel]=b,"FORM"===this.loginConfig.postType&&(h="application/x-www-form-urlencoded",i=this.loginConfig.loginUserLabel+"="+a+"&"+this.loginConfig.loginPassLabel+"="+b),this.logger.debug("Post type: "+this.loginConfig.postType+"value: ",i),c({method:"POST",url:this.loginConfig.loginUrlForRemote,data:i,headers:{"Content-Type":h}}).success(function(b){if(g.logger.info("Login successful for user: ",[a,b,g.loginConfig]),g.getAuthManager().save(b,d,e),g.authService.loginConfirmed(b,g.configUpdateFunction),g.loginConfig.redirectAfterLogin)if(g.logger.info("should redirect after login",f.path(),f.search()),f.search().originalUrl){g.logger.info("original url found",f.search().originalUrl);var c=f.search().originalUrl;f.search("originalUrl",null),f.path(c)}else g.logger.info("using default url to redirect after login",f.path().originalUrl),f.path(g.loginConfig.defaultUrlAfterLogin)}).error(function(a){g.logger.error("login error: "+a),g.loginFailed(a)})},loginConfirmed:function(a){this.logger.info("loginConfirmed",a),this.authService.loginConfirmed(a,this.loginConfig.configUpdateFunction)},loginFailed:function(a){this.logger.warn("broadcasting login failed: "),this.$rootScope.$broadcast("event:auth-loginFailed",a)},logout:function(a,b,c){this.logger.debug("logout called");var d=this;a.post(this.loginConfig.logoutUrlForRemote,{},this.loginConfig.getHttpConfig).success(function(){d.logger.info("Logout successful"),d.getAuthManager().clear(b,c),c.$broadcast("event:auth-logoutConfirmed","")}).error(function(a){d.logger.error("logout error: "+a)})},getRequestInterceptor:function(){this.logger?this.logger.debug("get request interceptor called"):console.log("get request interceptor called");var a=this;return["$q","$rootScope","$cookieStore","$location",function(b,c,d,e){return{request:function(e){a.logger.debug("avaughan.login request interceptor - request!!!!",[a.getAuthManager().getTokenValues(c),e]);var f=e.url.indexOf(a.loginConfig.restCallsWillContain)>=0;return a.logger.debug("avaughan.login request is rest call?",[f,e.url]),f&&a.getAuthManager().isTokenAvailable(c,d)?a.getAuthManager().setAuthOnRequest(c,e):a.logger.debug("avaughan.login token is not available, or not rest call"),e||b.when(e)},responseError:function(c){return a.logger.error("avaughan.login request interceptor - responseError",c),a.loginFailed(c),403===c.status&&a.loginConfig.redirectIfTokenNotFound&&(a.logger.info("got 403 and configured to redirect",a.loginConfig.redirectIfTokenNotFoundUrl),e.search("originalUrl",e.path()),e.path(a.loginConfig.redirectIfTokenNotFoundUrl)),b.reject(c)},response:function(b){return a.logger.debug("avaughan.login request interceptor - response",b),b}}}]},isTokenAvailable:function(a,b){return this.getAuthManager().isTokenAvailable(a,b)},checkRequest:function(a,b,c){var d=a.path();this.getAuthManager().load(b,c),this.getAuthManager().isTokenAvailable(c,b)?(this.logger?this.logger.debug("app.js routing to path",d):console.log("app.js routing to path",d),a.path(d)):this.loginConfig.redirectIfTokenNotFound&&(this.logger?this.logger.debug("not authorized, routing",this.loginConfig.redirectIfTokenNotFoundUrl):console.log("not authorized, routing",this.loginConfig.redirectIfTokenNotFoundUrl),console.log("location.path ",a.path(),this.loginConfig.redirectIfTokenNotFoundUrl),""!==a.path()&&a.path()!==this.loginConfig.redirectIfTokenNotFoundUrl&&a.search("originalUrl",a.path()),a.path(this.loginConfig.redirectIfTokenNotFoundUrl)),this.logger?this.logger.debug("app.js routing to path complete",d):console.log("app.js routing to path complete",d)}};angular.module("avaughan.login",["avaughan.logging","ngResource","ngCookies","http-auth-interceptor"]),angular.module("avaughan.login").provider("avLogin",["$httpProvider",function(a){var b=_.extend(AVaughanLogin,{});this.initialize=function(a){console.log("avaughan.login initialize called",a),b.construct(a)},this.$get=["authService","avLog","$rootScope",function(c,d,e){return console.log("avaughan.login get called",c),b.interceptHttpRequests(a),b.initialize(c,d,e),b}]}]);